"use strict";(self.webpackChunkslim=self.webpackChunkslim||[]).push([[143],{7971:(e,t,n)=>{var o=n(538),s=n(1468),i=n(1083),a=n(2577),d=n(629),l=n(4054),c=n(1215);o.Z.config.devtools=!0,o.Z.config.performance=!0,(0,s.zb)(),(0,s.VZ)();new o.Z({name:"index",router:i.Z,store:a.Z,data:()=>({isAuthenticated:!1}),async mounted(){const{getShows:e,setLoadingDisplay:t,setLoadingFinished:n}=this;if(l.yG&&console.log("App Mounted!"),await this.$store.dispatch("auth"),!window.location.pathname.includes("/login")){const{$store:o}=this;await o.dispatch("login"),this.isAuthenticated=!0,Promise.all([o.dispatch("getConfig"),o.dispatch("getStats")]).then((o=>{let[s]=o;l.yG&&console.log("App Loaded!");const i=new CustomEvent("medusa-config-loaded",{detail:{general:s.general,layout:s.layout}});window.dispatchEvent(i),e().then((()=>{console.log("Finished loading all shows."),setTimeout((()=>{n(!0),t(!1)}),2e3)}))})).catch((e=>{console.debug(e),alert("Unable to connect to Medusa!")}))}},methods:{...(0,d.nv)({getShows:"getShows"}),...(0,d.OI)(["setLoadingDisplay","setLoadingFinished"])},render(e){if(this.isAuthenticated||window.location.pathname.includes("/login"))return e(c.gV)}}).$mount("#app-wrapper")}},e=>{e.O(0,[886,125],(()=>{return t=7971,e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=app.js.map